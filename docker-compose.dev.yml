services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: bugbounty_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: bugbounty_db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d bugbounty_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - bugbounty_network

  # Redis for Celery and Caching
  redis:
    image: redis:7-alpine
    container_name: bugbounty_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - bugbounty_network

  # Django Application
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
      target: development
    container_name: bugbounty_backend
    restart: unless-stopped
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=config.settings.development
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/bugbounty_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - BACKEND_SECRET_KEY=${BACKEND_SECRET_KEY}
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend,bugbounty_backend
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://localhost:80
    volumes:
      - ./backend:/app
      - ./backend/media:/app/media
      - ./backend/static:/app/static
      - ./backend/logs:/app/logs
      - ./backend/scan_results:/app/scan_results
    ports:
      - "8001:8001"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        echo 'Starting Django server...' &&
        python manage.py runserver 0.0.0.0:8000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - bugbounty_network

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
      target: development
    container_name: bugbounty_api
    restart: unless-stopped
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/bugbounty_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ALLOWED_HOSTS=localhost,127.0.0.1,api,bugbounty_api
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://localhost:80
    volumes:
      - ./backend/api:/app/api
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        alembic upgrade head &&
        echo 'Starting FastAPI server...' &&
        uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - bugbounty_network

  # Celery Worker
  celery-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.celery
      target: development
    container_name: bugbounty_celery
    restart: unless-stopped
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=config.settings.development
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/bugbounty_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - C_FORCE_ROOT=1
    volumes:
      - ./backend:/app
      - ./backend/media:/app/media
      - ./backend/logs:/app/logs
      - ./backend/scan_results:/app/scan_results
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for Django to be ready...' &&
        sleep 30 &&
        echo 'Starting Celery worker...' &&
        celery -A config worker -l info --concurrency=4
      "
    networks:
      - bugbounty_network

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: .
      dockerfile: docker/Dockerfile.celery-beat
      target: development
    container_name: bugbounty_celery_beat
    restart: unless-stopped
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=config.settings.development
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/bugbounty_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - C_FORCE_ROOT=1
    volumes:
      - ./backend:/app
      - ./backend/logs:/app/logs
      - ./backend/scan_results:/app/scan_results
      - ./backend/celerybeat-schedule:/app/celerybeat-schedule
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for Django to be ready...' &&
        sleep 35 &&
        echo 'Starting Celery beat...' &&
        celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
      "
    networks:
      - bugbounty_network

  # Flower (Celery Monitoring)
  flower:
    build:
      context: .
      dockerfile: docker/Dockerfile.flower
      target: development
    container_name: bugbounty_flower
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    volumes:
      - ./backend:/app
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
      celery-worker:
        condition: service_started
    command: >
      sh -c "
        echo 'Starting Flower monitoring...' &&
        celery -A config flower --port=5555 --broker=redis://:redis_password@redis:6379/0
      "
    networks:
      - bugbounty_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: bugbounty_nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/static:/var/www/static:ro
      - ./nginx/media:/var/www/media:ro
      - ./nginx/logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - bugbounty_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  scan_results:
    driver: local
  celerybeat_schedule:
    driver: local

networks:
  bugbounty_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16