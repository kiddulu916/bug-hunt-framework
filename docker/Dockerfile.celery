# Celery Worker Dockerfile
# Multi-stage build for production optimization
FROM python:3.11-slim as base

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    DJANGO_SETTINGS_MODULE=config.settings.production \
    C_FORCE_ROOT=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    postgresql-client \
    libpq-dev \
    curl \
    wget \
    git \
    # Penetration testing tools
    nmap \
    nikto \
    dirb \
    gobuster \
    sqlmap \
    whatweb \
    dnsutils \
    netcat-traditional \
    masscan \
    # Build tools
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set work directory
WORKDIR /app

# Development stage
FROM base as development

# Copy requirements and install dependencies
COPY backend/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY backend/ .

# Change ownership to appuser
RUN chown -R appuser:appuser /app
USER appuser

# Default command
CMD ["celery", "-A", "config", "worker", "-l", "info", "--concurrency=4"]

# Production stage
FROM base as production

# Copy requirements and install dependencies
COPY backend/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY backend/ .

# Create necessary directories
RUN mkdir -p /app/logs /app/media /app/static /app/scan_results/raw /app/scan_results/parsed

# Change ownership to appuser
RUN chown -R appuser:appuser /app
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD celery -A config inspect ping || exit 1

# Default command
CMD ["celery", "-A", "config", "worker", "-l", "info", "--concurrency=8", "--max-tasks-per-child=1000"]