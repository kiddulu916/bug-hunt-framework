services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: bugbounty_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-bugbounty_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - bugbounty_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bugbounty_user}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for Celery task queue
  redis:
    image: redis:7-alpine
    container_name: bugbounty_redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - bugbounty_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Backend API service
  api:
    build:
      context: ../
      dockerfile: docker/Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: bugbounty_api
    environment:
      - DEBUG=${DEBUG:-True}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bugbounty_user}:${POSTGRES_PASSWORD:-secure_password_here}@db:5432/${POSTGRES_DB:-bugbounty_platform}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,0.0.0.0}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://127.0.0.1:3000}
    volumes:
      - ../backend:/app
      - media_files:/app/media
      - static_files:/app/static
      - scan_results:/app/scan_results
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bugbounty_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Celery worker for background tasks
  celery_worker:
    build:
      context: ../
      dockerfile: docker/Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: bugbounty_celery_worker
    command: celery -A config worker -l info --concurrency=4
    environment:
      - DEBUG=${DEBUG:-True}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bugbounty_user}:${POSTGRES_PASSWORD:-secure_password_here}@db:5432/${POSTGRES_DB:-bugbounty_platform}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
    volumes:
      - ../backend:/app
      - media_files:/app/media
      - scan_results:/app/scan_results
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bugbounty_network
    restart: unless-stopped

  # Celery beat for scheduled tasks
  celery_beat:
    build:
      context: ../
      dockerfile: docker/Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: bugbounty_celery_beat
    command: celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DEBUG=${DEBUG:-True}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bugbounty_user}:${POSTGRES_PASSWORD:-secure_password_here}@db:5432/${POSTGRES_DB:-bugbounty_platform}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
    volumes:
      - ../backend:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bugbounty_network
    restart: unless-stopped

  # Flower for Celery monitoring
  flower:
    build:
      context: ../
      dockerfile: docker/Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: bugbounty_flower
    command: celery -A config flower --port=5555
    environment:
      - DEBUG=${DEBUG:-True}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bugbounty_user}:${POSTGRES_PASSWORD:-secure_password_here}@db:5432/${POSTGRES_DB:-bugbounty_platform}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    depends_on:
      - redis
      - celery_worker
    networks:
      - bugbounty_network
    restart: unless-stopped

  # Frontend React application
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: bugbounty_frontend
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000/api}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL:-ws://localhost:8000/ws}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ../frontend:/app
      - /app/node_modules
    depends_on:
      - api
    networks:
      - bugbounty_network
    restart: unless-stopped

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: bugbounty_nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_files:/var/www/static
      - media_files:/var/www/media
    depends_on:
      - api
      - frontend
    networks:
      - bugbounty_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_files:
    driver: local
  static_files:
    driver: local
  scan_results:
    driver: local

networks:
  bugbounty_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16