'use client';

import { CheckCircle2, XCircle, AlertCircle, Terminal, FileText, ExternalLink } from 'lucide-react';

const STATUS_CONFIG = {
  SUCCESS: {
    icon: CheckCircle2,
    color: 'text-green-500',
    bg: 'bg-green-900/20',
    border: 'border-green-900/50',
    label: 'Successful',
  },
  FAILED: {
    icon: XCircle,
    color: 'text-red-500',
    bg: 'bg-red-900/20',
    border: 'border-red-900/50',
    label: 'Failed',
  },
  PARTIAL: {
    icon: AlertCircle,
    color: 'text-yellow-500',
    bg: 'bg-yellow-900/20',
    border: 'border-yellow-900/50',
    label: 'Partial Success',
  },
};

export function ExploitationResults({ results }) {
  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  if (!results || results.length === 0) {
    return (
      <div className="bg-[#1a1a1a] border border-gray-800 rounded-lg p-6 text-center">
        <Terminal className="w-8 h-8 text-gray-600 mx-auto mb-2" />
        <p className="text-gray-500 text-sm">No exploitation attempts recorded</p>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {results.map((result, index) => {
        const statusConfig = STATUS_CONFIG[result.status] || STATUS_CONFIG.FAILED;
        const StatusIcon = statusConfig.icon;

        return (
          <div
            key={index}
            className={`${statusConfig.bg} border ${statusConfig.border} rounded-lg overflow-hidden`}
          >
            {/* Header */}
            <div className="p-4">
              <div className="flex items-start justify-between mb-3">
                <div className="flex items-center gap-3">
                  <div className={`p-2 bg-gray-900/50 rounded ${statusConfig.color}`}>
                    <StatusIcon className="w-5 h-5" />
                  </div>
                  <div>
                    <h5 className="text-sm font-semibold text-white">
                      {result.exploit_name || 'Exploitation Attempt'}
                    </h5>
                    <p className={`text-xs ${statusConfig.color} mt-0.5`}>
                      {statusConfig.label}
                    </p>
                  </div>
                </div>
                {result.executed_at && (
                  <span className="text-xs text-gray-500">{formatDate(result.executed_at)}</span>
                )}
              </div>

              {/* Description */}
              {result.description && (
                <p className="text-sm text-gray-300 mb-3">{result.description}</p>
              )}

              {/* Metadata Grid */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mb-3">
                {result.method && (
                  <div>
                    <p className="text-xs text-gray-500 uppercase tracking-wide mb-1">Method</p>
                    <p className="text-sm text-white font-mono">{result.method}</p>
                  </div>
                )}
                {result.impact_level && (
                  <div>
                    <p className="text-xs text-gray-500 uppercase tracking-wide mb-1">Impact</p>
                    <p className="text-sm text-white">{result.impact_level}</p>
                  </div>
                )}
                {result.duration && (
                  <div>
                    <p className="text-xs text-gray-500 uppercase tracking-wide mb-1">Duration</p>
                    <p className="text-sm text-white">{result.duration}s</p>
                  </div>
                )}
                {result.attempts && (
                  <div>
                    <p className="text-xs text-gray-500 uppercase tracking-wide mb-1">Attempts</p>
                    <p className="text-sm text-white">{result.attempts}</p>
                  </div>
                )}
              </div>

              {/* Proof of Concept */}
              {result.poc && (
                <div className="bg-[#0f0f0f] border border-gray-800 rounded-lg p-3 mb-3">
                  <div className="flex items-center gap-2 mb-2">
                    <Terminal className="w-4 h-4 text-blue-400" />
                    <span className="text-xs text-gray-400 uppercase tracking-wide font-medium">
                      Proof of Concept
                    </span>
                  </div>
                  <pre className="text-xs text-gray-300 font-mono whitespace-pre-wrap overflow-x-auto">
                    {result.poc}
                  </pre>
                </div>
              )}

              {/* Output/Response */}
              {result.output && (
                <div className="bg-[#0f0f0f] border border-gray-800 rounded-lg p-3 mb-3">
                  <div className="flex items-center gap-2 mb-2">
                    <FileText className="w-4 h-4 text-green-400" />
                    <span className="text-xs text-gray-400 uppercase tracking-wide font-medium">
                      Exploitation Output
                    </span>
                  </div>
                  <pre className="text-xs text-gray-300 font-mono whitespace-pre-wrap overflow-x-auto max-h-64 overflow-y-auto">
                    {result.output}
                  </pre>
                </div>
              )}

              {/* Error Message (for failed attempts) */}
              {result.status === 'FAILED' && result.error && (
                <div className="bg-red-900/10 border border-red-900/30 rounded-lg p-3 mb-3">
                  <div className="flex items-center gap-2 mb-2">
                    <XCircle className="w-4 h-4 text-red-500" />
                    <span className="text-xs text-red-400 uppercase tracking-wide font-medium">
                      Error Details
                    </span>
                  </div>
                  <p className="text-sm text-red-300">{result.error}</p>
                </div>
              )}

              {/* Achieved Objectives */}
              {result.objectives_achieved && result.objectives_achieved.length > 0 && (
                <div className="bg-green-900/10 border border-green-900/30 rounded-lg p-3 mb-3">
                  <div className="flex items-center gap-2 mb-2">
                    <CheckCircle2 className="w-4 h-4 text-green-500" />
                    <span className="text-xs text-green-400 uppercase tracking-wide font-medium">
                      Achieved Objectives
                    </span>
                  </div>
                  <ul className="space-y-1">
                    {result.objectives_achieved.map((objective, idx) => (
                      <li key={idx} className="text-sm text-green-300 flex items-start gap-2">
                        <span className="text-green-500 mt-0.5">â€¢</span>
                        <span>{objective}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              {/* Technical Details */}
              {result.technical_details && (
                <div className="bg-[#0f0f0f] border border-gray-800 rounded-lg p-3">
                  <div className="flex items-center gap-2 mb-2">
                    <FileText className="w-4 h-4 text-blue-400" />
                    <span className="text-xs text-gray-400 uppercase tracking-wide font-medium">
                      Technical Details
                    </span>
                  </div>
                  <pre className="text-xs text-gray-300 font-mono whitespace-pre-wrap">
                    {typeof result.technical_details === 'string'
                      ? result.technical_details
                      : JSON.stringify(result.technical_details, null, 2)}
                  </pre>
                </div>
              )}

              {/* References */}
              {result.references && result.references.length > 0 && (
                <div className="mt-3 pt-3 border-t border-gray-800">
                  <span className="text-xs text-gray-400 uppercase tracking-wide font-medium mb-2 block">
                    References
                  </span>
                  <div className="space-y-1">
                    {result.references.map((ref, idx) => (
                      <a
                        key={idx}
                        href={ref.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="flex items-center gap-2 text-sm text-blue-400 hover:text-blue-300 transition-colors"
                      >
                        <ExternalLink className="w-3.5 h-3.5" />
                        <span>{ref.title || ref.url}</span>
                      </a>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        );
      })}
    </div>
  );
}
