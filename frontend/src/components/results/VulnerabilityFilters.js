'use client';

import { useState, useEffect } from 'react';
import { useTargets } from '@/hooks/api/useTargets';
import { X } from 'lucide-react';

const SEVERITY_OPTIONS = [
  { value: 'CRITICAL', label: 'Critical', color: 'bg-red-500' },
  { value: 'HIGH', label: 'High', color: 'bg-orange-500' },
  { value: 'MEDIUM', label: 'Medium', color: 'bg-yellow-500' },
  { value: 'LOW', label: 'Low', color: 'bg-blue-500' },
  { value: 'INFO', label: 'Info', color: 'bg-gray-500' },
];

const STATUS_OPTIONS = [
  { value: 'NEW', label: 'New' },
  { value: 'CONFIRMED', label: 'Confirmed' },
  { value: 'IN_PROGRESS', label: 'In Progress' },
  { value: 'RESOLVED', label: 'Resolved' },
  { value: 'FALSE_POSITIVE', label: 'False Positive' },
];

export function VulnerabilityFilters({ filters, onFilterChange }) {
  const [localFilters, setLocalFilters] = useState(filters);
  const { data: targetsData } = useTargets();

  const targets = targetsData?.results || [];

  useEffect(() => {
    setLocalFilters(filters);
  }, [filters]);

  const handleSeverityToggle = (severity) => {
    const newSeverity = localFilters.severity.includes(severity)
      ? localFilters.severity.filter((s) => s !== severity)
      : [...localFilters.severity, severity];

    const newFilters = { ...localFilters, severity: newSeverity };
    setLocalFilters(newFilters);
    onFilterChange(newFilters);
  };

  const handleStatusToggle = (status) => {
    const newStatus = localFilters.status.includes(status)
      ? localFilters.status.filter((s) => s !== status)
      : [...localFilters.status, status];

    const newFilters = { ...localFilters, status: newStatus };
    setLocalFilters(newFilters);
    onFilterChange(newFilters);
  };

  const handleTargetChange = (targetId) => {
    const newFilters = {
      ...localFilters,
      target: targetId === 'all' ? null : parseInt(targetId),
    };
    setLocalFilters(newFilters);
    onFilterChange(newFilters);
  };

  const handleClearAll = () => {
    const clearedFilters = {
      severity: [],
      status: [],
      target: null,
    };
    setLocalFilters(clearedFilters);
    onFilterChange(clearedFilters);
  };

  const hasActiveFilters =
    localFilters.severity.length > 0 ||
    localFilters.status.length > 0 ||
    localFilters.target !== null;

  return (
    <div className="space-y-4">
      {/* Severity Filter */}
      <div>
        <div className="flex items-center justify-between mb-3">
          <label className="text-xs font-semibold text-gray-400 uppercase tracking-wide">
            Severity
          </label>
          {localFilters.severity.length > 0 && (
            <button
              onClick={() => {
                const newFilters = { ...localFilters, severity: [] };
                setLocalFilters(newFilters);
                onFilterChange(newFilters);
              }}
              className="text-xs text-blue-400 hover:text-blue-300 transition-colors"
            >
              Clear
            </button>
          )}
        </div>
        <div className="flex flex-wrap gap-2">
          {SEVERITY_OPTIONS.map((option) => (
            <button
              key={option.value}
              onClick={() => handleSeverityToggle(option.value)}
              className={`px-3 py-1.5 rounded text-sm font-medium transition-all ${
                localFilters.severity.includes(option.value)
                  ? `${option.color} text-white shadow-lg`
                  : 'bg-gray-800 text-gray-400 hover:bg-gray-700'
              }`}
            >
              {option.label}
            </button>
          ))}
        </div>
      </div>

      {/* Status Filter */}
      <div>
        <div className="flex items-center justify-between mb-3">
          <label className="text-xs font-semibold text-gray-400 uppercase tracking-wide">
            Status
          </label>
          {localFilters.status.length > 0 && (
            <button
              onClick={() => {
                const newFilters = { ...localFilters, status: [] };
                setLocalFilters(newFilters);
                onFilterChange(newFilters);
              }}
              className="text-xs text-blue-400 hover:text-blue-300 transition-colors"
            >
              Clear
            </button>
          )}
        </div>
        <div className="flex flex-wrap gap-2">
          {STATUS_OPTIONS.map((option) => (
            <button
              key={option.value}
              onClick={() => handleStatusToggle(option.value)}
              className={`px-3 py-1.5 rounded text-sm font-medium transition-all ${
                localFilters.status.includes(option.value)
                  ? 'bg-blue-600 text-white shadow-lg'
                  : 'bg-gray-800 text-gray-400 hover:bg-gray-700'
              }`}
            >
              {option.label}
            </button>
          ))}
        </div>
      </div>

      {/* Target Filter */}
      <div>
        <div className="flex items-center justify-between mb-3">
          <label className="text-xs font-semibold text-gray-400 uppercase tracking-wide">
            Target
          </label>
          {localFilters.target && (
            <button
              onClick={() => {
                const newFilters = { ...localFilters, target: null };
                setLocalFilters(newFilters);
                onFilterChange(newFilters);
              }}
              className="text-xs text-blue-400 hover:text-blue-300 transition-colors"
            >
              Clear
            </button>
          )}
        </div>
        <select
          value={localFilters.target || 'all'}
          onChange={(e) => handleTargetChange(e.target.value)}
          className="w-full bg-gray-800 border border-gray-700 rounded-lg px-4 py-2.5 text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        >
          <option value="all">All Targets</option>
          {targets.map((target) => (
            <option key={target.id} value={target.id}>
              {target.name}
            </option>
          ))}
        </select>
      </div>

      {/* Clear All Button */}
      {hasActiveFilters && (
        <div className="pt-4 border-t border-gray-800">
          <button
            onClick={handleClearAll}
            className="w-full flex items-center justify-center gap-2 px-4 py-2.5 bg-red-900/20 hover:bg-red-900/30 border border-red-900/50 rounded-lg text-red-400 font-medium transition-colors"
          >
            <X className="w-4 h-4" />
            Clear All Filters
          </button>
        </div>
      )}
    </div>
  );
}
