'use client';

import { useState } from 'react';
import { ChevronDown, ExternalLink, Target, Calendar, AlertTriangle, CheckCircle2, Clock } from 'lucide-react';
import { CVSSScore } from './CVSSScore';
import { EvidenceDisplay } from './EvidenceDisplay';
import { ExploitationResults } from './ExploitationResults';

const SEVERITY_CONFIG = {
  CRITICAL: {
    bg: 'bg-red-900/20',
    border: 'border-red-900/50',
    text: 'text-red-500',
    badge: 'bg-red-500',
  },
  HIGH: {
    bg: 'bg-orange-900/20',
    border: 'border-orange-900/50',
    text: 'text-orange-500',
    badge: 'bg-orange-500',
  },
  MEDIUM: {
    bg: 'bg-yellow-900/20',
    border: 'border-yellow-900/50',
    text: 'text-yellow-500',
    badge: 'bg-yellow-500',
  },
  LOW: {
    bg: 'bg-blue-900/20',
    border: 'border-blue-900/50',
    text: 'text-blue-500',
    badge: 'bg-blue-500',
  },
  INFO: {
    bg: 'bg-gray-800/50',
    border: 'border-gray-700',
    text: 'text-gray-400',
    badge: 'bg-gray-500',
  },
};

const STATUS_CONFIG = {
  NEW: {
    icon: AlertTriangle,
    text: 'text-yellow-500',
    label: 'New',
  },
  CONFIRMED: {
    icon: CheckCircle2,
    text: 'text-green-500',
    label: 'Confirmed',
  },
  IN_PROGRESS: {
    icon: Clock,
    text: 'text-blue-500',
    label: 'In Progress',
  },
  RESOLVED: {
    icon: CheckCircle2,
    text: 'text-gray-500',
    label: 'Resolved',
  },
  FALSE_POSITIVE: {
    icon: AlertTriangle,
    text: 'text-gray-500',
    label: 'False Positive',
  },
};

export function VulnerabilityCard({ vulnerability }) {
  const [isExpanded, setIsExpanded] = useState(false);

  const severityConfig = SEVERITY_CONFIG[vulnerability.severity] || SEVERITY_CONFIG.INFO;
  const statusConfig = STATUS_CONFIG[vulnerability.status] || STATUS_CONFIG.NEW;
  const StatusIcon = statusConfig.icon;

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
    });
  };

  return (
    <div
      className={`${severityConfig.bg} border ${severityConfig.border} rounded-lg overflow-hidden transition-all hover:shadow-lg`}
    >
      {/* Card Header */}
      <div className="p-6">
        <div className="flex items-start justify-between mb-4">
          <div className="flex-1">
            <div className="flex items-center gap-3 mb-2">
              {/* Severity Badge */}
              <div className={`${severityConfig.badge} px-3 py-1 rounded text-white text-xs font-bold uppercase`}>
                {vulnerability.severity}
              </div>

              {/* Status Badge */}
              <div className="flex items-center gap-1.5 bg-gray-800/50 px-3 py-1 rounded">
                <StatusIcon className={`w-3.5 h-3.5 ${statusConfig.text}`} />
                <span className={`text-xs font-medium ${statusConfig.text}`}>
                  {statusConfig.label}
                </span>
              </div>

              {/* CVE Badge */}
              {vulnerability.cve_id && (
                <div className="bg-purple-900/30 border border-purple-900/50 px-3 py-1 rounded">
                  <span className="text-purple-400 text-xs font-mono">{vulnerability.cve_id}</span>
                </div>
              )}
            </div>

            {/* Title */}
            <h3 className="text-xl font-semibold text-white mb-2">{vulnerability.title}</h3>

            {/* Meta Information */}
            <div className="flex items-center gap-4 text-sm text-gray-400">
              {vulnerability.target && (
                <div className="flex items-center gap-1.5">
                  <Target className="w-4 h-4" />
                  <span>{vulnerability.target.name}</span>
                </div>
              )}
              {vulnerability.discovered_at && (
                <div className="flex items-center gap-1.5">
                  <Calendar className="w-4 h-4" />
                  <span>{formatDate(vulnerability.discovered_at)}</span>
                </div>
              )}
            </div>
          </div>

          {/* CVSS Score */}
          {vulnerability.cvss_score && (
            <CVSSScore score={vulnerability.cvss_score} vector={vulnerability.cvss_vector} />
          )}
        </div>

        {/* Description */}
        <p className="text-gray-300 mb-4 leading-relaxed">{vulnerability.description}</p>

        {/* Affected Asset */}
        {vulnerability.asset_url && (
          <div className="bg-[#0f0f0f] border border-gray-700 rounded-lg p-3 mb-4">
            <div className="flex items-center justify-between">
              <div className="flex-1">
                <p className="text-xs text-gray-500 uppercase tracking-wide mb-1">Affected Asset</p>
                <code className="text-sm text-blue-400 font-mono">{vulnerability.asset_url}</code>
              </div>
              <a
                href={vulnerability.asset_url}
                target="_blank"
                rel="noopener noreferrer"
                className="ml-4 p-2 bg-gray-800 hover:bg-gray-700 rounded transition-colors"
              >
                <ExternalLink className="w-4 h-4 text-gray-400" />
              </a>
            </div>
          </div>
        )}

        {/* Expand/Collapse Button */}
        <button
          onClick={() => setIsExpanded(!isExpanded)}
          className="w-full flex items-center justify-center gap-2 mt-4 py-2 bg-gray-800/50 hover:bg-gray-700/50 rounded transition-colors text-gray-300 text-sm font-medium"
        >
          {isExpanded ? 'Hide Details' : 'Show Details'}
          <ChevronDown className={`w-4 h-4 transition-transform ${isExpanded ? 'rotate-180' : ''}`} />
        </button>
      </div>

      {/* Expanded Content */}
      {isExpanded && (
        <div className="border-t border-gray-700 bg-[#0f0f0f]/50">
          <div className="p-6 space-y-6">
            {/* Technical Details */}
            {vulnerability.technical_details && (
              <div>
                <h4 className="text-sm font-semibold text-white uppercase tracking-wide mb-3">
                  Technical Details
                </h4>
                <div className="bg-[#1a1a1a] border border-gray-800 rounded-lg p-4">
                  <pre className="text-sm text-gray-300 whitespace-pre-wrap font-mono">
                    {vulnerability.technical_details}
                  </pre>
                </div>
              </div>
            )}

            {/* Evidence */}
            {vulnerability.evidence && vulnerability.evidence.length > 0 && (
              <div>
                <h4 className="text-sm font-semibold text-white uppercase tracking-wide mb-3">
                  Evidence
                </h4>
                <EvidenceDisplay evidence={vulnerability.evidence} />
              </div>
            )}

            {/* Exploitation Results */}
            {vulnerability.exploitation_results && vulnerability.exploitation_results.length > 0 && (
              <div>
                <h4 className="text-sm font-semibold text-white uppercase tracking-wide mb-3">
                  Exploitation Results
                </h4>
                <ExploitationResults results={vulnerability.exploitation_results} />
              </div>
            )}

            {/* Remediation */}
            {vulnerability.remediation && (
              <div>
                <h4 className="text-sm font-semibold text-white uppercase tracking-wide mb-3">
                  Remediation
                </h4>
                <div className="bg-green-900/10 border border-green-900/30 rounded-lg p-4">
                  <p className="text-gray-300 leading-relaxed">{vulnerability.remediation}</p>
                </div>
              </div>
            )}

            {/* References */}
            {vulnerability.references && vulnerability.references.length > 0 && (
              <div>
                <h4 className="text-sm font-semibold text-white uppercase tracking-wide mb-3">
                  References
                </h4>
                <div className="space-y-2">
                  {vulnerability.references.map((ref, idx) => (
                    <a
                      key={idx}
                      href={ref.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="flex items-center gap-2 text-sm text-blue-400 hover:text-blue-300 transition-colors"
                    >
                      <ExternalLink className="w-4 h-4" />
                      <span>{ref.title || ref.url}</span>
                    </a>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}
