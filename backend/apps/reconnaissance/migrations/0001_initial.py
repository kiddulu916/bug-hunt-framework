# Generated by Django 4.2.7 on 2025-09-15 04:00

import django.contrib.postgres.fields
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ReconResult",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "result_type",
                    models.CharField(
                        choices=[
                            ("subdomain", "Subdomain"),
                            ("endpoint", "Endpoint"),
                            ("service", "Service"),
                            ("technology", "Technology"),
                            ("email", "Email Address"),
                            ("ip_address", "IP Address"),
                            ("port", "Open Port"),
                            ("certificate", "SSL Certificate"),
                            ("dns_record", "DNS Record"),
                        ],
                        help_text="Type of asset discovered",
                        max_length=50,
                    ),
                ),
                (
                    "discovered_asset",
                    models.CharField(
                        help_text="The discovered asset (URL, domain, IP, etc.)",
                        max_length=1000,
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, help_text="Resolved IP address", null=True
                    ),
                ),
                (
                    "port",
                    models.IntegerField(
                        blank=True, help_text="Port number if applicable", null=True
                    ),
                ),
                (
                    "protocol",
                    models.CharField(
                        blank=True,
                        help_text="Protocol (http, https, tcp, udp)",
                        max_length=20,
                    ),
                ),
                (
                    "service_name",
                    models.CharField(
                        blank=True,
                        help_text="Service running on the port",
                        max_length=100,
                    ),
                ),
                (
                    "service_version",
                    models.CharField(
                        blank=True, help_text="Version of the service", max_length=200
                    ),
                ),
                (
                    "status_code",
                    models.IntegerField(
                        blank=True, help_text="HTTP status code", null=True
                    ),
                ),
                (
                    "response_size",
                    models.IntegerField(
                        blank=True, help_text="HTTP response size in bytes", null=True
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True, help_text="Page title", max_length=500
                    ),
                ),
                (
                    "technologies",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100),
                        blank=True,
                        default=list,
                        help_text="Detected technologies",
                        size=None,
                    ),
                ),
                (
                    "discovered_by_tool",
                    models.CharField(
                        help_text="Tool that discovered this asset", max_length=100
                    ),
                ),
                (
                    "discovery_method",
                    models.CharField(
                        choices=[
                            ("dns_enum", "DNS Enumeration"),
                            ("port_scan", "Port Scanning"),
                            ("web_crawling", "Web Crawling"),
                            ("cert_transparency", "Certificate Transparency"),
                            ("search_engine", "Search Engine"),
                            ("social_media", "Social Media"),
                            ("code_repository", "Code Repository"),
                            ("archive_search", "Archive Search"),
                        ],
                        help_text="Method used for discovery",
                        max_length=100,
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        default=0.0, help_text="Confidence in result accuracy (0-1)"
                    ),
                ),
                (
                    "is_in_scope",
                    models.BooleanField(
                        help_text="Whether this asset is in testing scope", null=True
                    ),
                ),
                (
                    "scope_validation_reason",
                    models.CharField(
                        blank=True,
                        help_text="Reason for scope decision",
                        max_length=500,
                    ),
                ),
                (
                    "headers",
                    models.JSONField(
                        blank=True, default=dict, help_text="HTTP headers if applicable"
                    ),
                ),
                (
                    "additional_info",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional metadata about the asset",
                    ),
                ),
                ("discovered_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "recon_results",
                "ordering": ["-discovered_at"],
            },
        ),
    ]
