"""
Exploitation Models
backend/apps/exploitation/models.py
"""

from django.db import models
from django.contrib.postgres.fields import ArrayField
from apps.vulnerabilities.models import Vulnerability
from apps.targets.models import Target
import uuid

class ExploitationType(models.TextChoices):
    """Types of exploitation techniques"""
    SQL_INJECTION = "sql_injection", "SQL Injection"
    XSS = "xss", "Cross-Site Scripting"
    CSRF = "csrf", "Cross-Site Request Forgery"
    COMMAND_INJECTION = "command_injection", "Command Injection"
    FILE_UPLOAD = "file_upload", "File Upload Vulnerability"
    DIRECTORY_TRAVERSAL = "directory_traversal", "Directory Traversal"
    SSRF = "ssrf", "Server-Side Request Forgery"
    XXE = "xxe", "XML External Entity"
    DESERIALIZATION = "deserialization", "Insecure Deserialization"
    PRIVILEGE_ESCALATION = "privilege_escalation", "Privilege Escalation"
    AUTHENTICATION_BYPASS = "auth_bypass", "Authentication Bypass"
    AUTHORIZATION_BYPASS = "authz_bypass", "Authorization Bypass"
    RCE = "rce", "Remote Code Execution"
    LFI = "lfi", "Local File Inclusion"
    RFI = "rfi", "Remote File Inclusion"
    BUFFER_OVERFLOW = "buffer_overflow", "Buffer Overflow"
    RACE_CONDITION = "race_condition", "Race Condition"

class ExploitationStatus(models.TextChoices):
    """Status of exploitation attempts"""
    PENDING = "pending", "Pending"
    IN_PROGRESS = "in_progress", "In Progress"
    SUCCESSFUL = "successful", "Successful"
    FAILED = "failed", "Failed"
    PARTIAL = "partial", "Partial Success"
    BLOCKED = "blocked", "Blocked by Defense"
    TIMEOUT = "timeout", "Timeout"

class ExploitationSeverity(models.TextChoices):
    """Severity levels for exploitation results"""
    INFO = "info", "Informational"
    LOW = "low", "Low"
    MEDIUM = "medium", "Medium"
    HIGH = "high", "High"
    CRITICAL = "critical", "Critical"

class ExploitationSession(models.Model):
    """
    Tracks exploitation sessions for vulnerabilities
    """
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    vulnerability = models.ForeignKey(
        Vulnerability,
        on_delete=models.CASCADE,
        related_name='exploitation_sessions'
    )
    target = models.ForeignKey(
        Target,
        on_delete=models.CASCADE,
        related_name='exploitation_sessions'
    )
    exploitation_type = models.CharField(
        max_length=50,
        choices=ExploitationType.choices
    )
    status = models.CharField(
        max_length=20,
        choices=ExploitationStatus.choices,
        default=ExploitationStatus.PENDING
    )
    severity = models.CharField(
        max_length=20,
        choices=ExploitationSeverity.choices,
        default=ExploitationSeverity.INFO
    )
    started_at = models.DateTimeField(auto_now_add=True)
    completed_at = models.DateTimeField(null=True, blank=True)
    exploit_chain_data = models.JSONField(default=dict, blank=True)
    payloads_used = ArrayField(
        models.TextField(),
        default=list,
        blank=True,
        help_text="List of payloads used in this exploitation session"
    )
    notes = models.TextField(blank=True)
    automated = models.BooleanField(default=True)

    class Meta:
        db_table = 'exploitation_sessions'
        ordering = ['-started_at']

    def __str__(self):
        return f"Exploitation Session {self.id} - {self.vulnerability}"

class ExploitResult(models.Model):
    """
    Stores results of individual exploitation attempts
    """
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    session = models.ForeignKey(
        ExploitationSession,
        on_delete=models.CASCADE,
        related_name='results'
    )
    payload = models.TextField()
    response_data = models.JSONField(default=dict, blank=True)
    success = models.BooleanField(default=False)
    impact_level = models.CharField(
        max_length=20,
        choices=ExploitationSeverity.choices,
        default=ExploitationSeverity.INFO
    )
    evidence_files = ArrayField(
        models.CharField(max_length=500),
        default=list,
        blank=True,
        help_text="Paths to evidence files (screenshots, logs, etc.)"
    )
    proof_of_concept = models.TextField(blank=True)
    timestamp = models.DateTimeField(auto_now_add=True)

    class Meta:
        db_table = 'exploit_results'
        ordering = ['-timestamp']

    def __str__(self):
        return f"Exploit Result {self.id} - {'Success' if self.success else 'Failed'}"

class ExploitChain(models.Model):
    """
    Represents a chain of exploits used together
    """
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=200)
    description = models.TextField()
    chain_steps = models.JSONField(
        default=list,
        help_text="Ordered list of exploitation steps"
    )
    target_vulnerabilities = models.ManyToManyField(
        'vulnerabilities.Vulnerability',
        related_name='exploit_chains'
    )
    success_rate = models.FloatField(default=0.0)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        db_table = 'exploit_chains'
        ordering = ['-created_at']

    def __str__(self):
        return f"Exploit Chain: {self.name}"

class ExploitTemplate(models.Model):
    """
    Reusable exploit templates
    """
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=200)
    exploitation_type = models.CharField(
        max_length=50,
        choices=ExploitationType.choices
    )
    payload_template = models.TextField(
        help_text="Template payload with placeholders"
    )
    configuration = models.JSONField(
        default=dict,
        help_text="Configuration parameters for the exploit"
    )
    prerequisites = ArrayField(
        models.TextField(),
        default=list,
        blank=True,
        help_text="List of prerequisites for this exploit"
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        db_table = 'exploit_templates'
        ordering = ['name']

    def __str__(self):
        return f"Exploit Template: {self.name}"