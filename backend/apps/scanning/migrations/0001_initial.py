# Generated by Django 4.2.7 on 2025-09-15 04:00

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("targets", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ScanSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "session_name",
                    models.CharField(
                        help_text="Descriptive name for this scan", max_length=255
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("queued", "Queued"),
                            ("running", "Running"),
                            ("paused", "Paused"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="queued",
                        max_length=20,
                    ),
                ),
                (
                    "scan_config",
                    models.JSONField(
                        default=dict, help_text="Tools to run and their parameters"
                    ),
                ),
                (
                    "methodology_phases",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        default=list,
                        help_text="Testing methodology phases",
                        size=None,
                    ),
                ),
                (
                    "current_phase",
                    models.CharField(
                        blank=True,
                        help_text="Current testing phase",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "phase_progress",
                    models.JSONField(
                        default=dict, help_text="Progress tracking per phase"
                    ),
                ),
                (
                    "total_progress",
                    models.FloatField(
                        default=0.0,
                        help_text="Overall scan progress percentage (0-100)",
                    ),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("estimated_completion", models.DateTimeField(blank=True, null=True)),
                ("total_subdomains_found", models.IntegerField(default=0)),
                ("total_endpoints_found", models.IntegerField(default=0)),
                ("total_vulnerabilities", models.IntegerField(default=0)),
                ("critical_vulnerabilities", models.IntegerField(default=0)),
                ("high_vulnerabilities", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "target",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scan_sessions",
                        to="targets.target",
                    ),
                ),
            ],
            options={
                "db_table": "scan_sessions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ToolExecution",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "tool_name",
                    models.CharField(
                        help_text="Tool name (amass, subfinder, nuclei, etc.)",
                        max_length=100,
                    ),
                ),
                (
                    "tool_category",
                    models.CharField(
                        help_text="Tool category (passive_recon, active_recon, etc.)",
                        max_length=50,
                    ),
                ),
                (
                    "command_executed",
                    models.TextField(help_text="Full command that was executed"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("skipped", "Skipped"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("execution_time_seconds", models.FloatField(blank=True, null=True)),
                (
                    "output_file_path",
                    models.FilePathField(
                        blank=True,
                        help_text="Path to tool output file",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "raw_output",
                    models.TextField(blank=True, help_text="Raw tool output"),
                ),
                (
                    "parsed_results_count",
                    models.IntegerField(
                        default=0, help_text="Number of results parsed from output"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error message if tool execution failed"
                    ),
                ),
                (
                    "tool_parameters",
                    models.JSONField(
                        default=dict, help_text="Parameters passed to the tool"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "scan_session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tool_executions",
                        to="scanning.scansession",
                    ),
                ),
            ],
            options={
                "db_table": "tool_executions",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["scan_session", "tool_category"],
                        name="tool_execut_scan_se_592fb0_idx",
                    ),
                    models.Index(
                        fields=["tool_name"], name="tool_execut_tool_na_653899_idx"
                    ),
                    models.Index(
                        fields=["status"], name="tool_execut_status_b80dba_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="scansession",
            index=models.Index(
                fields=["target", "status"], name="scan_sessio_target__103599_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="scansession",
            index=models.Index(fields=["status"], name="scan_sessio_status_8a4d8d_idx"),
        ),
        migrations.AddIndex(
            model_name="scansession",
            index=models.Index(
                fields=["created_at"], name="scan_sessio_created_9633d5_idx"
            ),
        ),
    ]
