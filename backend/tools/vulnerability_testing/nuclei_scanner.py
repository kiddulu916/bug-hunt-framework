"""
Nuclei Vulnerability Scanner
backend/tools/vulnerability_testing/nuclei_scanner.py

Implements wrapper for Nuclei - fast vulnerability scanner based on templates
"""

import json
import yaml
from typing import Dict, List, Any
from pathlib import Path

from ..base import BaseTool, ToolConfig, ToolCategory, register_tool


class NucleiTool(BaseTool):
    """Wrapper for Nuclei vulnerability scanner"""

    def __init__(self):
        super().__init__("nuclei", ToolCategory.VULNERABILITY_TESTING, "nuclei")

    def build_command(self, config: ToolConfig) -> List[str]:
        """Build nuclei command"""
        command = [
            self.binary_path,
            "-u", config.target,
            "-json",
            "-o", f"{config.output_dir}/nuclei_results.json",
            "-stats",
            "-silent"
        ]

        # Add severity filters
        if config.custom_params and "severity" in config.custom_params:
            severities = config.custom_params["severity"]
            if isinstance(severities, list):
                command.extend(["-s", ",".join(severities)])
            else:
                command.extend(["-s", severities])

        # Add template tags
        if config.custom_params and "tags" in config.custom_params:
            tags = config.custom_params["tags"]
            if isinstance(tags, list):
                command.extend(["-tags", ",".join(tags)])
            else:
                command.extend(["-tags", tags])

        # Add specific templates
        if config.custom_params and "templates" in config.custom_params:
            templates = config.custom_params["templates"]
            if isinstance(templates, list):
                for template in templates:
                    command.extend(["-t", template])
            else:
                command.extend(["-t", templates])

        # Rate limiting
        if config.rate_limit:
            command.extend(["-rl", str(int(config.rate_limit))])

        # Concurrency
        if config.threads:
            command.extend(["-c", str(config.threads)])

        # Timeout
        if config.timeout:
            command.extend(["-timeout", str(config.timeout)])

        # Disable update check for automation
        command.append("-duc")

        # Add custom headers if specified
        if config.custom_params and "headers" in config.custom_params:
            for header in config.custom_params["headers"]:
                command.extend(["-H", header])

        return command

    def parse_output(self, stdout: str, stderr: str, output_files: List[str]) -> List[Dict[str, Any]]:
        """Parse nuclei JSON output"""
        results = []

        # Parse JSON output file
        for file_path in output_files:
            if 'nuclei_results.json' in file_path:
                try:
                    with open(file_path, 'r') as f:
                        for line in f:
                            line = line.strip()
                            if line:
                                try:
                                    data = json.loads(line)

                                    # Extract vulnerability information
                                    template_id = data.get('template-id', '')
                                    template_info = data.get('info', {})

                                    vulnerability = {
                                        'type': 'vulnerability',
                                        'template_id': template_id,
                                        'name': template_info.get('name', template_id),
                                        'severity': template_info.get('severity', 'unknown').lower(),
                                        'description': template_info.get('description', ''),
                                        'reference': template_info.get('reference', []),
                                        'tags': template_info.get('tags', []),
                                        'classification': template_info.get('classification', {}),
                                        'url': data.get('matched-at', ''),
                                        'host': data.get('host', ''),
                                        'path': data.get('path', ''),
                                        'matched_line': data.get('matched-line', ''),
                                        'extracted_results': data.get('extracted-results', []),
                                        'curl_command': data.get('curl-command', ''),
                                        'request': data.get('request', ''),
                                        'response': data.get('response', ''),
                                        'discovered_by': 'nuclei',
                                        'timestamp': data.get('timestamp', ''),
                                        'matcher_status': data.get('matcher-status', False),
                                        'metadata': {
                                            'template_path': data.get('template-path', ''),
                                            'matcher_name': data.get('matcher-name', ''),
                                            'extractor_name': data.get('extractor-name', ''),
                                            'type': data.get('type', '')
                                        }
                                    }

                                    # Add OWASP classification if available
                                    classification = template_info.get('classification', {})
                                    if 'owasp' in classification:
                                        vulnerability['owasp'] = classification['owasp']
                                    if 'cwe-id' in classification:
                                        vulnerability['cwe_id'] = classification['cwe-id']
                                    if 'cvss-score' in classification:
                                        vulnerability['cvss_score'] = classification['cvss-score']
                                    if 'cvss-metrics' in classification:
                                        vulnerability['cvss_metrics'] = classification['cvss-metrics']

                                    results.append(vulnerability)

                                except json.JSONDecodeError as e:
                                    self.logger.warning("Failed to parse JSON line: {line[:100]}... Error: %s", e)
                                    continue

                except Exception as e:
                    self.logger.error("Error reading nuclei output file: %s", e)

        # Parse stdout for any additional results
        if not results and stdout:
            for line in stdout.strip().split('\n'):
                if line.strip() and line.startswith('{'):
                    try:
                        data = json.loads(line)
                        # Process similar to file parsing
                        template_id = data.get('template-id', '')
                        template_info = data.get('info', {})

                        results.append({
                            'type': 'vulnerability',
                            'template_id': template_id,
                            'name': template_info.get('name', template_id),
                            'severity': template_info.get('severity', 'unknown').lower(),
                            'url': data.get('matched-at', ''),
                            'discovered_by': 'nuclei'
                        })
                    except json.JSONDecodeError:
                        continue

        return results


class NucleiTemplateTool(BaseTool):
    """Tool for managing Nuclei templates"""

    def __init__(self):
        super().__init__("nuclei-templates", ToolCategory.VULNERABILITY_TESTING, "nuclei")

    def build_command(self, config: ToolConfig) -> List[str]:
        """Build command to update nuclei templates"""
        command = [
            self.binary_path,
            "-update-templates",
            "-duc"  # Disable update check
        ]

        return command

    def parse_output(self, stdout: str, stderr: str, output_files: List[str]) -> List[Dict[str, Any]]:
        """Parse template update output"""
        results = []

        # Parse stdout for update information
        lines = stdout.strip().split('\n')
        for line in lines:
            if 'templates' in line.lower() and ('updated' in line.lower() or 'downloaded' in line.lower()):
                results.append({
                    'type': 'template_update',
                    'message': line.strip(),
                    'discovered_by': 'nuclei-templates'
                })

        return results


class CustomNucleiTool(BaseTool):
    """Custom Nuclei tool for specific template sets"""

    def __init__(self, name: str, template_path: str, description: str = ""):
        super().__init__(name, ToolCategory.VULNERABILITY_TESTING, "nuclei")
        self.template_path = template_path
        self.description = description

    def build_command(self, config: ToolConfig) -> List[str]:
        """Build nuclei command with custom templates"""
        command = [
            self.binary_path,
            "-u", config.target,
            "-t", self.template_path,
            "-json",
            "-o", f"{config.output_dir}/{self.name}_results.json",
            "-duc"
        ]

        # Add rate limiting
        if config.rate_limit:
            command.extend(["-rl", str(int(config.rate_limit))])

        return command

    def parse_output(self, stdout: str, stderr: str, output_files: List[str]) -> List[Dict[str, Any]]:
        """Parse custom nuclei output"""
        # Reuse the main NucleiTool parsing logic
        nuclei_tool = NucleiTool()
        results = nuclei_tool.parse_output(stdout, stderr, output_files)

        # Add custom tool identifier
        for result in results:
            result['discovered_by'] = self.name
            result['custom_template_set'] = self.template_path

        return results


# Create some pre-configured Nuclei tools for common vulnerability types
def create_specialized_nuclei_tools():
    """Create specialized Nuclei tools for different vulnerability categories"""

    # Web application vulnerabilities
    web_app_tool = CustomNucleiTool(
        "nuclei-web-apps",
        "web-apps/",
        "Web application vulnerability templates"
    )

    # Network vulnerabilities
    network_tool = CustomNucleiTool(
        "nuclei-network",
        "network/",
        "Network service vulnerability templates"
    )

    # CVE-based scanning
    cve_tool = CustomNucleiTool(
        "nuclei-cves",
        "cves/",
        "CVE-based vulnerability templates"
    )

    # Misconfiguration detection
    misconfig_tool = CustomNucleiTool(
        "nuclei-misconfigs",
        "misconfigurations/",
        "Misconfiguration detection templates"
    )

    return [web_app_tool, network_tool, cve_tool, misconfig_tool]


# Register main Nuclei tools
register_tool(NucleiTool())
register_tool(NucleiTemplateTool())

# Register specialized tools
for tool in create_specialized_nuclei_tools():
    register_tool(tool)
