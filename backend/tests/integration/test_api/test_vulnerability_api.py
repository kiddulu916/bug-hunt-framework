"""
Integration tests for Vulnerability API endpoints
"""

import pytest
import json
from unittest.mock import Mock, patch
from django.test import TransactionTestCase
from rest_framework.test import APIClient
from rest_framework_simplejwt.tokens import RefreshToken

from apps.vulnerabilities.models import Vulnerability, VulnSeverity, ExploitationDifficulty
from apps.scanning.models import ScanSession
from tests.factories import UserFactory, TargetFactory, ScanSessionFactory, VulnerabilityFactory


@pytest.mark.integration
@pytest.mark.django_db(transaction=True)
class TestVulnerabilityAPIEndpoints(TransactionTestCase):
    """Test vulnerability API endpoints"""

    def setUp(self):
        self.client = APIClient()
        self.user = UserFactory()
        self.target = TargetFactory()
        self.scan_session = ScanSessionFactory(target=self.target)

        # Authenticate client
        refresh = RefreshToken.for_user(self.user)
        self.client.credentials(HTTP_AUTHORIZATION=f'Bearer {refresh.access_token}')

    def test_create_vulnerability(self):
        """Test creating a new vulnerability"""
        vulnerability_data = {
            'scan_session': self.scan_session.id,
            'vulnerability_name': 'SQL Injection in Login Form',
            'vulnerability_type': 'sql_injection',
            'owasp_category': 'A03',
            'cwe_id': 'CWE-89',
            'severity': VulnSeverity.HIGH,
            'cvss_score': 8.1,
            'impact_description': 'Potential data breach and unauthorized access',
            'affected_url': 'https://example.com/login',
            'affected_parameter': 'username',
            'http_method': 'POST',
            'payload_used': "admin' OR '1'='1' --",
            'discovered_by_tool': 'sqlmap',
            'discovery_method': 'automated_parameter_fuzzing',
            'confidence_level': 0.9,
            'remediation_suggestion': 'Use parameterized queries'
        }

        response = self.client.post('/api/vulnerabilities/', vulnerability_data, format='json')
        self.assertEqual(response.status_code, 201)

        # Verify vulnerability was created
        vulnerability = Vulnerability.objects.get(id=response.data['id'])
        self.assertEqual(vulnerability.vulnerability_name, 'SQL Injection in Login Form')
        self.assertEqual(vulnerability.severity, VulnSeverity.HIGH)
        self.assertEqual(vulnerability.cvss_score, 8.1)

    def test_list_vulnerabilities(self):
        """Test listing vulnerabilities"""
        # Create test vulnerabilities
        vulnerabilities = VulnerabilityFactory.create_batch(5, scan_session=self.scan_session)

        response = self.client.get('/api/vulnerabilities/')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(len(response.data['results']), 5)

    def test_retrieve_vulnerability(self):
        """Test retrieving a specific vulnerability"""
        vulnerability = VulnerabilityFactory(scan_session=self.scan_session)

        response = self.client.get(f'/api/vulnerabilities/{vulnerability.id}/')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.data['id'], vulnerability.id)
        self.assertEqual(response.data['vulnerability_name'], vulnerability.vulnerability_name)

    def test_update_vulnerability(self):
        """Test updating a vulnerability"""
        vulnerability = VulnerabilityFactory(
            scan_session=self.scan_session,
            severity=VulnSeverity.MEDIUM
        )

        update_data = {
            'severity': VulnSeverity.HIGH,
            'cvss_score': 8.5,
            'manually_verified': True,
            'verification_notes': 'Manually verified and confirmed exploitable'
        }

        response = self.client.patch(
            f'/api/vulnerabilities/{vulnerability.id}/',
            update_data,
            format='json'
        )
        self.assertEqual(response.status_code, 200)

        # Verify update
        vulnerability.refresh_from_db()
        self.assertEqual(vulnerability.severity, VulnSeverity.HIGH)
        self.assertEqual(vulnerability.cvss_score, 8.5)
        self.assertTrue(vulnerability.manually_verified)

    def test_delete_vulnerability(self):
        """Test deleting a vulnerability"""
        vulnerability = VulnerabilityFactory(scan_session=self.scan_session)

        response = self.client.delete(f'/api/vulnerabilities/{vulnerability.id}/')
        self.assertEqual(response.status_code, 204)

        # Verify deletion
        self.assertFalse(Vulnerability.objects.filter(id=vulnerability.id).exists())

    def test_filter_vulnerabilities_by_severity(self):
        """Test filtering vulnerabilities by severity"""
        # Create vulnerabilities with different severities
        VulnerabilityFactory.create_batch(2, scan_session=self.scan_session, severity=VulnSeverity.HIGH)
        VulnerabilityFactory.create_batch(3, scan_session=self.scan_session, severity=VulnSeverity.MEDIUM)
        VulnerabilityFactory.create_batch(1, scan_session=self.scan_session, severity=VulnSeverity.LOW)

        # Filter by high severity
        response = self.client.get('/api/vulnerabilities/?severity=high')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(len(response.data['results']), 2)

        # Filter by medium severity
        response = self.client.get('/api/vulnerabilities/?severity=medium')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(len(response.data['results']), 3)

    def test_filter_vulnerabilities_by_type(self):
        """Test filtering vulnerabilities by type"""
        VulnerabilityFactory.create_batch(
            2, scan_session=self.scan_session, vulnerability_type='sql_injection'
        )
        VulnerabilityFactory.create_batch(
            3, scan_session=self.scan_session, vulnerability_type='xss_reflected'
        )

        response = self.client.get('/api/vulnerabilities/?type=sql_injection')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(len(response.data['results']), 2)

    def test_search_vulnerabilities(self):
        """Test searching vulnerabilities"""
        VulnerabilityFactory(
            scan_session=self.scan_session,
            vulnerability_name='SQL Injection in Login'
        )
        VulnerabilityFactory(
            scan_session=self.scan_session,
            vulnerability_name='XSS in Search Form'
        )

        response = self.client.get('/api/vulnerabilities/?search=SQL')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(len(response.data['results']), 1)
        self.assertIn('SQL', response.data['results'][0]['vulnerability_name'])

    def test_vulnerability_statistics(self):
        """Test vulnerability statistics endpoint"""
        # Create vulnerabilities with different severities
        VulnerabilityFactory.create_batch(2, scan_session=self.scan_session, severity=VulnSeverity.CRITICAL)
        VulnerabilityFactory.create_batch(3, scan_session=self.scan_session, severity=VulnSeverity.HIGH)
        VulnerabilityFactory.create_batch(4, scan_session=self.scan_session, severity=VulnSeverity.MEDIUM)

        response = self.client.get('/api/vulnerabilities/statistics/')
        self.assertEqual(response.status_code, 200)

        stats = response.data
        self.assertEqual(stats['total'], 9)
        self.assertEqual(stats['critical'], 2)
        self.assertEqual(stats['high'], 3)
        self.assertEqual(stats['medium'], 4)

    def test_vulnerability_export(self):
        """Test vulnerability export functionality"""
        VulnerabilityFactory.create_batch(3, scan_session=self.scan_session)

        # Test CSV export
        response = self.client.get('/api/vulnerabilities/export/?format=csv')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response['Content-Type'], 'text/csv')

        # Test JSON export
        response = self.client.get('/api/vulnerabilities/export/?format=json')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response['Content-Type'], 'application/json')

    def test_vulnerability_correlation(self):
        """Test vulnerability correlation endpoint"""
        # Create similar vulnerabilities across different scan sessions
        other_scan = ScanSessionFactory(target=self.target)

        VulnerabilityFactory(
            scan_session=self.scan_session,
            vulnerability_type='xss_reflected',
            affected_parameter='search'
        )
        VulnerabilityFactory(
            scan_session=other_scan,
            vulnerability_type='xss_reflected',
            affected_parameter='search'
        )

        response = self.client.get('/api/vulnerabilities/correlate/?type=xss_reflected')
        self.assertEqual(response.status_code, 200)
        self.assertIn('correlated_vulnerabilities', response.data)

    def test_bulk_vulnerability_operations(self):
        """Test bulk vulnerability operations"""
        vulnerabilities = VulnerabilityFactory.create_batch(5, scan_session=self.scan_session)
        vulnerability_ids = [v.id for v in vulnerabilities]

        # Test bulk status update
        bulk_data = {
            'vulnerability_ids': vulnerability_ids,
            'action': 'update_status',
            'data': {'manually_verified': True}
        }

        response = self.client.post('/api/vulnerabilities/bulk/', bulk_data, format='json')
        self.assertEqual(response.status_code, 200)

        # Verify updates
        for vuln_id in vulnerability_ids:
            vulnerability = Vulnerability.objects.get(id=vuln_id)
            self.assertTrue(vulnerability.manually_verified)

    def test_vulnerability_evidence_upload(self):
        """Test uploading evidence for vulnerabilities"""
        vulnerability = VulnerabilityFactory(scan_session=self.scan_session)

        # Test file upload
        with patch('django.core.files.storage.default_storage.save') as mock_save:
            mock_save.return_value = 'evidence/screenshot_001.png'

            response = self.client.post(
                f'/api/vulnerabilities/{vulnerability.id}/evidence/',
                {
                    'evidence_type': 'screenshot',
                    'description': 'Proof of concept screenshot',
                    'file': 'mock_file_content'
                },
                format='multipart'
            )
            self.assertEqual(response.status_code, 201)

    def test_unauthorized_access(self):
        """Test unauthorized access to vulnerability endpoints"""
        # Clear credentials
        self.client.credentials()

        response = self.client.get('/api/vulnerabilities/')
        self.assertEqual(response.status_code, 401)

    def test_invalid_vulnerability_data(self):
        """Test creating vulnerability with invalid data"""
        invalid_data = {
            'scan_session': 999999,  # Non-existent scan session
            'vulnerability_name': '',  # Empty name
            'severity': 'invalid_severity',  # Invalid severity
            'cvss_score': 15.0  # Invalid CVSS score (max is 10.0)
        }

        response = self.client.post('/api/vulnerabilities/', invalid_data, format='json')
        self.assertEqual(response.status_code, 400)
        self.assertIn('errors', response.data)

    def test_vulnerability_pagination(self):
        """Test vulnerability list pagination"""
        VulnerabilityFactory.create_batch(25, scan_session=self.scan_session)

        # Test first page
        response = self.client.get('/api/vulnerabilities/?page=1&page_size=10')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(len(response.data['results']), 10)
        self.assertIsNotNone(response.data['next'])

        # Test second page
        response = self.client.get('/api/vulnerabilities/?page=2&page_size=10')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(len(response.data['results']), 10)

    def test_vulnerability_ordering(self):
        """Test vulnerability list ordering"""
        # Create vulnerabilities with different severities and dates
        vuln1 = VulnerabilityFactory(scan_session=self.scan_session, severity=VulnSeverity.LOW)
        vuln2 = VulnerabilityFactory(scan_session=self.scan_session, severity=VulnSeverity.HIGH)
        vuln3 = VulnerabilityFactory(scan_session=self.scan_session, severity=VulnSeverity.CRITICAL)

        # Test ordering by severity (descending)
        response = self.client.get('/api/vulnerabilities/?ordering=-severity')
        self.assertEqual(response.status_code, 200)

        results = response.data['results']
        self.assertEqual(results[0]['id'], vuln3.id)  # Critical first
        self.assertEqual(results[1]['id'], vuln2.id)  # High second
        self.assertEqual(results[2]['id'], vuln1.id)  # Low last