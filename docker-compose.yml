services:
  # PostgreSQL Database
  db:
    container_name: bugbounty_db
    build:
      context: ./database
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - bugbounty_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Cache and Message Broker
  redis:
    container_name: bugbounty_redis
    build:
      context: ./backend/redis
      dockerfile: Dockerfile
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    env_file:
      - .env
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - bugbounty_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Django Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bugbounty_backend
    env_file:
      - .env
    environment:
      - PGSSLMODE=disable
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/media:/app/media
      - ./backend/static:/app/static
      - ./backend/evidence:/app/evidence
      - ./backend/reports:/app/reports
      - ./backend/scan_results:/app/scan_results
    ports:
      - "8001:8001"  # Django
      - "8000:8000"  # FastAPI
    networks:
      - bugbounty_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/admin/"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: celery/Dockerfile
    container_name: bugbounty_celery_worker
    env_file:
      - .env
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/evidence:/app/evidence
      - ./backend/reports:/app/reports
      - ./backend/scan_results:/app/scan_results
      - ./backend/tools/tools_data:/opt/tools
    networks:
      - bugbounty_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    command: >
      celery -A config.celery worker --loglevel=info --concurrency=${CELERY_WORKER_CONCURRENCY} --max-tasks-per-child=50
    healthcheck:
      test: ["CMD", "celery", "-A", "config.celery", "inspect", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./backend
      dockerfile: celery-beat/Dockerfile
    container_name: bugbounty_celery_beat
    env_file:
      - .env
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/celery_beat_data:/app/celerybeat-schedule
    networks:
      - bugbounty_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    command: >
      celery -A config.celery beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler

  # Flower - Celery Monitoring
  flower:
    build:
      context: ./backend
      dockerfile: flower/Dockerfile
    container_name: bugbounty_flower
    env_file:
      - .env
    ports:
      - "5555:5555"
    networks:
      - bugbounty_network
    depends_on:
      redis:
        condition: service_healthy
      celery-worker:
        condition: service_healthy
    command: >
      celery -A config.celery flower --port=5555 --basic_auth=${FLOWER_USERNAME}:${FLOWER_PASSWORD}

  # Security Tools Container
  tools:
    build:
      context: ./backend
      dockerfile: tools/Dockerfile
    container_name: bugbounty_tools
    env_file:
      - .env
    volumes:
      - ./backend/evidence:/app/evidence
      - ./backend/scan_results:/app/scan_results
      - ./backend/tools/tools_data:/opt/tools
      - ./backend/tools/configs:/opt/tools/configs
    networks:
      - bugbounty_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python3", "/opt/tools/bin/test_tools.py", "--quiet"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    command: tail -f /dev/null

  # Next.js Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: bugbounty_frontend
    env_file:
      - .env
    ports:
      - "3001:3001"
    networks:
      - bugbounty_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: bugbounty_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./static:/var/www/static:ro
      - ./media:/var/www/media:ro
    ports:
      - "8080:80"
      - "8443:443"
    networks:
      - bugbounty_network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  bugbounty_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  scan_results:
    driver: local
  tools_data:
    driver: local
  celery_beat_data:
    driver: local