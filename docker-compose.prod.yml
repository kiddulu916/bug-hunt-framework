# Production override for docker-compose.yml
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

services:
  # PostgreSQL Database - Production Configuration
  db:
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Remove init script mount for production
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # Redis - Production Configuration
  redis:
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000

  # Django Application - Production
  backend:
    build:
      target: production
    environment:
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    command: >
      sh -c "
        echo 'Running production migrations...' &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        echo 'Creating superuser if needed...' &&
        python manage.py shell -c \"
        from django.contrib.auth import get_user_model;
        User = get_user_model();
        if not User.objects.filter(username='admin').exists():
          User.objects.create_superuser('admin', '${BACKEND_ADMIN_EMAIL}', '${BACKEND_ADMIN_PASSWORD}')
        \" &&
        echo 'Starting Django with Gunicorn...' &&
        gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120 --max-requests 1000 --max-requests-jitter 100
      "

  # FastAPI Application - Production
  api:
    build:
      target: production
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}

    command: >
      sh -c "
        echo 'Running SQLAlchemy migrations...' &&
        alembic upgrade head &&
        echo 'Starting FastAPI with Uvicorn...' &&
        uvicorn api.main:app --host 0.0.0.0 --port 8000 --workers 4
      "

  # Celery Worker - Production
  celery-worker:
    build:
      target: production
    environment:
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - C_FORCE_ROOT=1
      - SENTRY_DSN=${SENTRY_DSN}
    command: >
      sh -c "
        echo 'Starting Celery worker...' &&
        celery -A config worker -l info --concurrency=8 --max-tasks-per-child=1000
      "
    deploy:
      replicas: 2

  # Celery Beat - Production
  celery-beat:
    build:
      target: production
    environment:
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - C_FORCE_ROOT=1
      - SENTRY_DSN=${SENTRY_DSN}

  # Flower - Production (Optional, disable in production)
  flower:
    profiles:
      - monitoring  # Only run when explicitly requested
    build:
      target: production
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - FLOWER_BASIC_AUTH=${FLOWER_USERNAME}:${FLOWER_PASSWORD}

  # Nginx - Production with SSL
  nginx:
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/static:/var/www/static:ro
      - ./nginx/media:/var/www/media:ro
      - ./nginx/logs:/var/log/nginx
      - ./nginx/ssl:/etc/nginx/ssl:ro  # SSL certificates
    environment:
      - NGINX_ENVSUBST_TEMPLATE_SUFFIX=.template
      - DOMAIN_NAME=${NGINX_DOMAIN_NAME}

# Additional production volumes
volumes:
  ssl_certs:
    driver: local